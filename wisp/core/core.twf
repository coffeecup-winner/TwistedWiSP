/*
 * Core TwistedWiSP library
 */

// lag - return previous sample's value
[lag_value: prev]
func lag([default: skip] value: float) -> (out: float)
data
  prev: float
begin
  load %temp, @prev
  store #out, %temp
  store @prev, $value
end

// switch - return left (middle) signal if test is 0, otherwise return right
func switch(test: float, left: float, right: float) -> (out: float)
begin
  alloc !result
  cmp.eq %cond, $test, 0
  if %cond
    store !result, $left
  else
    store !result, $right
  end
  load %temp, !result
  store #out, %temp
end

// inputs - flow function inputs, treated specially by the flow compiler
func inputs() -> (out: float)
begin
  // NOTE: This function is not implemented since it's never called,
  // no point in conforming to the "write to all outs" rule.
end

// inputs - flow function outputs, treated specially by the flow compiler
func outputs(in: float) -> ()
begin
  // NOTE: This function is not implemented since it's never called
end

// control - GUI controls (set via direct data write)
func control() -> (out: float)
data
  value: float
begin
  load %temp, @value
  store #out, %temp
end

alias button: control
alias toggle: control

// watch - GUI watch (set via direct data watch adding)
[lag_value: 0]
func watch(value: float) -> ()
data
  prev: float
begin
  store @prev, $value
end

alias graph: watch

// delta - calculate the difference between the current sample and the previous sample
func delta(value: float) -> (out: float)
data
  prev: float
begin
  load %prev_value, @prev
  sub %diff, $value, %prev_value
  store @prev, $value
  store #out, %diff
end

// floor - round down to the nearest integer
func floor(value: float) -> (out: float)
begin
  trunc %temp, $value
  store #out, %temp
end

// abs - return the absolute value of a number
func abs(value: float) -> (out: float)
begin
  alloc !result
  cmp.lt %is_negative, $value, 0
  if %is_negative
    sub %abs_value, 0, $value
    store !result, %abs_value
  else
    store !result, $value
  end
    load %temp, !result
    store #out, %temp
end

// latch - update the returned value only when the second argument is non-zero
func latch(value: float, update: float) -> (out: float)
data
  prev: float
begin
  cmp.ne %should_update, $update, 0
  if %should_update
    store @prev, $value
  else
  end
  load %temp, @prev
  store #out, %temp
end

// buffer - loadable data buffer storage
func buffer() -> (out: array)
data
  buf: array
begin
  load %temp, @buf
  store #out, %temp
end

// read - read from an array
func read(buf: array, idx: float) -> (value: float)
begin
  alloc !result
  len %length, $buf
  cmp.ge %comp, $idx, %length
  if %comp
    store !result, 0
  else
    iload %temp, $buf, $idx
    store !result, %temp
  end
  load %temp, !result
  store #value, %temp
end

// write - write to an array
func write(buf: array, idx: float, value: float) -> ()
begin
  len %length, $buf
  cmp.ge %comp, $idx, %length
  if %comp
  else
    istore $buf, $idx, $value
  end
end

// len - get array length
func length(buf: array) -> (length: float)
begin
  len %temp, $buf
  store #length, %temp
end

func sample(buf: array, pos: float) -> (value: float)
begin
  alloc !result
  len %length, $buf
  cmp.eq %is_zero, %length, 0
  if %is_zero
    store !result, 0
  else
    mul %idx, $pos, %length
    trunc %curr_idx, %idx
    add %next_idx, %idx, 1
    rem %next_idx, %next_idx, %length
    iload %sample_left, $buf, %idx
    iload %sample_right, $buf, %next_idx
    sub %scale_left, %curr_idx, %idx
    sub %scale_right, 1, %scale_left
    mul %scaled_left, %sample_left, %scale_left
    mul %scaled_right, %sample_right, %scale_right
    add %res, %scaled_left, %scaled_right
    store !result, %res
  end
  load %res, !result
  store #value, %res
end
