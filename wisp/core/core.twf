/*
 * Core TwistedWiSP library
 */

// lag - return previous sample's value
[lag_value: prev]
func lag([default: skip] value: float) -> (out: float)
data
  prev: float
begin
  load %temp, @prev
  store #out, %temp
  store @prev, $value
end

func switch(test: float, left: float, right: float) -> (out: float)
begin
  alloc !result
  cmp.eq %cond, $test, 0
  if %cond
    store !result, $left
  else
    store !result, $right
  end
  load %temp, !result
  store #out, %temp
end

// control - GUI controls (set via direct data write)
func control() -> (out: float)
data
  value: float
begin
  load %temp, @value
  store #out, %temp
end

alias button: control
alias toggle: control

// watch - GUI watch (set via direct data watch adding)
[lag_value: 0]
func watch(value: float) -> ()
data
  prev: float
begin
  store @prev, $value
end

alias graph: watch

// buffer - loadable data buffer storage
func buffer() -> (out: array)
data
  buf: array
begin
  load %temp, @buf
  store #out, %temp
end

// read - read from an array
func read(buf: array, idx: float) -> (value: float)
begin
  alloc !result
  len %length, $buf
  cmp.ge %comp, $idx, %length
  if %comp
    store !result, 0
  else
    iload %temp, $buf, $idx
    store !result, %temp
  end
  load %temp, !result
  store #value, %temp
end

// write - write to an array
func write(buf: array, idx: float, value: float) -> ()
begin
  len %length, $buf
  cmp.ge %comp, $idx, %length
  if %comp
  else
    istore $buf, $idx, $value
  end
end

// len - get array length
func length(buf: array) -> (length: float)
begin
  len %temp, $buf
  store #length, %temp
end
